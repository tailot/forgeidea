/**
 * @fileoverview Defines the 'randomIdeaFlow' Genkit flow.
 * This flow orchestrates a multi-step process to generate a random idea.
 * It first calls `generateIdeaCategoriesFlow` to obtain a list of diverse idea categories,
 * then randomly selects one of these categories. Finally, it calls `generateIdeaFlow`
 * to generate a specific idea within that chosen category and specified language.
 */
import { ai } from '../config/genkit';
import { z } from 'zod';
import { generateIdeaCategoriesFlow } from './generateIdeaCategories';
import { generateIdeaFlow } from './generateIdea';

/**
 * Defines a Genkit flow named 'randomIdeaFlow'.
 *
 * This flow generates a random idea by first dynamically generating a list of idea categories,
 * then selecting one category at random, and finally generating an idea within that category.
 * It orchestrates calls to `generateIdeaCategoriesFlow` and `generateIdeaFlow`.
 *
 * Input Schema:
 *  - `language` (string): The language in which the AI models should respond.
 *
 * Output Schema:
 *  - (string): A randomly generated idea string.
 *
 * Process:
 * 1. Calls `generateIdeaCategoriesFlow` with a fixed count of 25 categories, a "specific"
 *    specificity level, and the provided language.
 * 2. If no categories are generated, it throws an error.
 * 3. Randomly selects one category from the generated list.
 * 4. Calls `generateIdeaFlow` with the randomly selected category and the provided language.
 * 5. Returns the idea generated by `generateIdeaFlow`.
 *
 * Error Handling:
 *  - Throws an error if `generateIdeaCategoriesFlow` returns no categories.
 *  - Propagates errors from `generateIdeaCategoriesFlow` or `generateIdeaFlow`, prefixing
 *    the error message with "randomIdeaFlow failed:".
 *
 * @param {object} params - The input object for the flow.
 * @param {string} params.language - The language for the AI's response.
 * @returns {Promise<string>} A promise that resolves to a randomly generated idea string.
 * @throws {Error} If no categories can be generated or if any of the underlying flows fail.
 */
export const randomIdeaFlow = ai.defineFlow(
    {
        name: 'randomIdeaFlow',
        inputSchema: z.object({
            language: z.string().describe("The language in which the model should respond.")
        }),
        outputSchema: z.string().describe("A randomly generated idea based on a random category.")
    },
    async (params) => {
        try {
            const paramInput = {
                count: 25,
                specificity: "specific" as const, // Note: 'specificity' is not a standard input for generateIdeaCategoriesFlow based on its current JSDoc. This might be an issue or a custom parameter.
                language: params.language
            };
            const categories = await generateIdeaCategoriesFlow(paramInput);

            if (!categories || categories.length === 0) {
                throw new Error("No categories were generated to choose from.");
            }

            const randomIndex = Math.floor(Math.random() * categories.length);
            const randomCategory = categories[randomIndex];

            const idea = await generateIdeaFlow({
                category: randomCategory,
                language: params.language
            });

            return idea;

        } catch (error) {
            throw new Error(`randomIdeaFlow failed: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
);
